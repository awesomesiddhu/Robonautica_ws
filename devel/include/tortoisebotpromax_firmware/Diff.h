// Generated by gencpp from file tortoisebotpromax_firmware/Diff.msg
// DO NOT EDIT!


#ifndef TORTOISEBOTPROMAX_FIRMWARE_MESSAGE_DIFF_H
#define TORTOISEBOTPROMAX_FIRMWARE_MESSAGE_DIFF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Bool.h>
#include <std_msgs/UInt8.h>

namespace tortoisebotpromax_firmware
{
template <class ContainerAllocator>
struct Diff_
{
  typedef Diff_<ContainerAllocator> Type;

  Diff_()
    : ldir()
    , lpwm()
    , rdir()
    , rpwm()  {
    }
  Diff_(const ContainerAllocator& _alloc)
    : ldir(_alloc)
    , lpwm(_alloc)
    , rdir(_alloc)
    , rpwm(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Bool_<ContainerAllocator>  _ldir_type;
  _ldir_type ldir;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _lpwm_type;
  _lpwm_type lpwm;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _rdir_type;
  _rdir_type rdir;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _rpwm_type;
  _rpwm_type rpwm;





  typedef boost::shared_ptr< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> const> ConstPtr;

}; // struct Diff_

typedef ::tortoisebotpromax_firmware::Diff_<std::allocator<void> > Diff;

typedef boost::shared_ptr< ::tortoisebotpromax_firmware::Diff > DiffPtr;
typedef boost::shared_ptr< ::tortoisebotpromax_firmware::Diff const> DiffConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tortoisebotpromax_firmware::Diff_<ContainerAllocator1> & lhs, const ::tortoisebotpromax_firmware::Diff_<ContainerAllocator2> & rhs)
{
  return lhs.ldir == rhs.ldir &&
    lhs.lpwm == rhs.lpwm &&
    lhs.rdir == rhs.rdir &&
    lhs.rpwm == rhs.rpwm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tortoisebotpromax_firmware::Diff_<ContainerAllocator1> & lhs, const ::tortoisebotpromax_firmware::Diff_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tortoisebotpromax_firmware

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef331214eeb33030643446a132be9599";
  }

  static const char* value(const ::tortoisebotpromax_firmware::Diff_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef331214eeb33030ULL;
  static const uint64_t static_value2 = 0x643446a132be9599ULL;
};

template<class ContainerAllocator>
struct DataType< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tortoisebotpromax_firmware/Diff";
  }

  static const char* value(const ::tortoisebotpromax_firmware::Diff_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Bool ldir\n"
"std_msgs/UInt8 lpwm\n"
"std_msgs/Bool rdir\n"
"std_msgs/UInt8 rpwm\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
;
  }

  static const char* value(const ::tortoisebotpromax_firmware::Diff_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ldir);
      stream.next(m.lpwm);
      stream.next(m.rdir);
      stream.next(m.rpwm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Diff_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tortoisebotpromax_firmware::Diff_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tortoisebotpromax_firmware::Diff_<ContainerAllocator>& v)
  {
    s << indent << "ldir: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.ldir);
    s << indent << "lpwm: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.lpwm);
    s << indent << "rdir: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.rdir);
    s << indent << "rpwm: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.rpwm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TORTOISEBOTPROMAX_FIRMWARE_MESSAGE_DIFF_H
